<link href="https://fonts.googleapis.com/css2?family=Nunito+Sans:wght@400;600;700&display=swap" rel="stylesheet">
 <meta name="turbo-visit-control" content="reload">

<div class="order-details-container">
  <h1 class="text-center">Order Details</h1>

  <div class="order-info">
    <p><strong>Order ID:</strong> <%= @order.id %></p>
    <p><strong>Date:</strong> <%= @order.created_at.strftime("%B %d, %Y %H:%M") %></p>
  </div>

  <h2 class="section-title">Order Items</h2>
  <table class="table">
    <thead>
      <tr>
        <th>Product</th>
        <th>Quantity</th>
        <th>Price</th>
        <th>Total</th>
      </tr>
    </thead>
    <tbody>
      <% @order.order_items.each do |item| %>
        <tr>
          <td><%= item.product.name %></td>
          <td><%= item.quantity %></td>
          <td>$<%= item.price %></td>
          <td>$<%= (item.price * item.quantity).round(2) %></td>
        </tr>
      <% end %>
    </tbody>
  </table>

  <h2 class="section-title">Taxes</h2>
  <div class="tax-details">
    <p><strong>GST:</strong> (<%= (@order.customer_user.province.gst * 100).round(1) %>%) $<%= @gst %></p>
    <p><strong>PST:</strong> (<%= (@order.customer_user.province.pst * 100).round(1) %>%) $<%= @pst %></p>
    <p><strong>HST:</strong> (<%= (@order.customer_user.province.hst * 100).round(1) %>%) $<%= @hst %></p>
  </div>

  <h2 class="section-title">Order Summary</h2>
  <div class="summary-details">
    <p><strong>Subtotal:</strong> $<%= @subtotal %></p>
    <p><strong>Total Taxes:</strong> $<%= (@gst + @pst + @hst).round(2) %></p>
    <p><strong>Total Price:</strong> $<%= @total_price %></p>
    <p><strong>Address:</strong> <%= @order.customer_user.address %></p>
    <p><strong>Phone:</strong> <%= @order.customer_user.phone_number %></p>
    <p><strong>Status:</strong> <%= @order.status %></p>
    <p><strong>Paypal:</strong> <%= @order.paypal_order_id %></p>
  </div>

  <div class="text-center mt-4">
    <% if @order.status == "unpaid" %>
      <div id="paypal-button-container" data-order-id="<%= @order.id %>"></div>
      <p class="text-muted mt-2">Please complete your payment using PayPal.</p>
    <% else %>
      <p class="text-success">This order has already been paid. Thank you!</p>
    <% end %>
    <%= link_to "Back to Home", root_path, class: "btn btn-primary rounded-pill px-4 py-2 mt-3" %>
  </div>

</div>

<style>
  body {
    font-family: 'Nunito Sans', sans-serif;
    background-color: #f8f9fa;
    margin: 0;
    padding: 0;
  }

  .order-details-container {
    max-width: 800px;
    margin: 50px auto;
    background-color: white;
    padding: 30px;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }

  .text-center {
    text-align: center;
  }

  .section-title {
    font-size: 24px;
    font-weight: 600;
    margin-top: 30px;
    border-bottom: 2px solid #ddd;
    padding-bottom: 5px;
  }

  .order-info p,
  .tax-details p,
  .summary-details p {
    font-size: 16px;
    margin: 10px 0;
  }

  .table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
  }

  .table th,
  .table td {
    border: 1px solid #ddd;
    padding: 10px;
    text-align: left;
  }

  .table th {
    background-color: #f8f9fa;
    font-weight: 600;
  }

  .btn-primary {
    color: white;
    text-decoration: none;

  }

  .rounded-pill {
    border-radius: 50px;
  }
</style>


<script>
  document.addEventListener("DOMContentLoaded", initializePayPalButtons);
  function initializePayPalButtons() {
    const paypalButtonContainer = document.getElementById("paypal-button-container");
    if (!paypalButtonContainer) {
      console.log("PayPal button container not found, skipping initialization.");
      return;
    }

    const orderId = paypalButtonContainer.dataset.orderId;
    if (!orderId) {
      console.error("Order ID is missing. Cannot initialize PayPal Buttons.");
      return;
    }

    console.log("Initializing PayPal Buttons for Order ID:", orderId);

    paypal.Buttons({
      createOrder: (data, actions) => {
        return fetch(`/orders/${orderId}/payments`, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-CSRF-Token": document.querySelector("meta[name='csrf-token']").content
          }
        }).then(response => {
          if (!response.ok) {
            throw new Error("Failed to create PayPal order.");
          }
          return response.json();
        }).then(data => {
          return data.paypal_order_id;
        });
      },
      onApprove: (data, actions) => {
        return fetch(`/orders/${orderId}/payments/success?order_id=${orderId}`, {
          method: "GET"
        }).then(response => {
          if (response.ok) {
            window.location.href = `/orders/${orderId}`;
          } else {
            alert("Payment capture failed. Please try again.");
          }
        });
      },
      onCancel: (data) => {
        alert("Payment was cancelled.");
        window.location.href = "/checkouts";
      },
      onError: (err) => {
        console.error("PayPal Error: ", err);
        alert("An error occurred during the payment process.");
      }
    }).render("#paypal-button-container");
  }

</script>



